package cn.com.xinli.portal.web.rest;

import cn.com.xinli.portal.web.auth.BadRestCredentialsException;
import cn.com.xinli.portal.web.auth.challenge.ChallengeNotFoundException;
import cn.com.xinli.portal.web.auth.token.TokenContainer;
import cn.com.xinli.portal.core.PortalError;
import cn.com.xinli.portal.core.PortalErrorContainer;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * Rest authentication entry point.
 *
 * <p>When rest authentication fails, PWS provides an entry point
 * to send authentication associated error back to clients.
 *
 * <p>{@link AuthenticationException}s are generated by spring-security framework.
 *
 * <p>This class will return a HTTP 401 status with
 * an error JSON inside http response body.
 *
 * <p>Project: xpws
 *
 * @author zhoupeng 2015/12/15.
 */
@Component
public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
    /** Logger. */
    private final Logger logger = LoggerFactory.getLogger(RestAuthenticationEntryPoint.class);

    /** Json factory. */
    private static final JsonFactory factory = new JsonFactory();

    /** Json object mapper. */
    private static final ObjectMapper mapper = new ObjectMapper(factory);

    /**
     * Send authentication error response.
     *
     * <p>This function will return a HTTP 401 status with
     * a {@link Error} JSON inside http response body.
     *
     * @param response rest response.
     * @param httpServletResponse servlet http response.
     * @throws IOException
     */
    private void respond(RestResponse response, HttpServletResponse httpServletResponse)
            throws IOException {
        if (logger.isDebugEnabled()) {
            logger.debug("authentication commence {}", response);
        }

        httpServletResponse.setContentType(MediaType.APPLICATION_JSON_UTF8.toString());
        httpServletResponse.setStatus(HttpStatus.UNAUTHORIZED.value());
        httpServletResponse.getWriter().print(
                mapper.writeValueAsString(response));
    }

    /**
     * Commence token exception.
     *
     * <p>When token exception occurs, server should send an error to remote client
     * and indicates which token is invalid. For example, server send error
     * in json indicates that token "foobar" is invalid.
     * <pre>
     * {
     *      "error": 103, //invalid_client_grant
     *      "token": "foobar",
     *      "description": "invalid access token",
     *      "url": ""
     * }
     * </pre>
     *
     * @param token invalid token.
     * @param error portal error.
     * @param httpServletResponse servlet http response.
     * @throws IOException
     */
    private void commenceToken(String token,
                               PortalError error,
                               HttpServletResponse httpServletResponse) throws IOException {
        respond(RestResponseBuilders.errorBuilder()
                .setToken(token)
                .setError(error)
                .setDescription(error.getReason())
                .build(), httpServletResponse);
    }

    /**
     * Commence other authentication exceptions.
     *
     * <p>Other authentication exceptions besides "token" exceptions do not need
     * to provide a token key inside error response.
     *
     * @param error portal error.
     * @param httpServletResponse servlet http response.
     * @throws IOException
     */
    private void commence(PortalError error, HttpServletResponse httpServletResponse)
            throws IOException {
        respond(RestResponseBuilders.errorBuilder()
                .setError(error)
                .setDescription(error.getReason())
                .build(), httpServletResponse);
    }

    /**
     * {@inheritDoc}
     *
     * <p>
     * {@link BadRestCredentialsException}s are thrown when incoming requests contain
     * invalid credentials.
     * {@link ChallengeNotFoundException}s are thrown when client respond challenge with
     * invalid answers.
     *
     * @param httpServletRequest http request.
     * @param httpServletResponse http response.
     * @param e authentication exception.
     * @throws IOException
     * @throws ServletException
     */
    @Override
    public void commence(HttpServletRequest httpServletRequest,
                         HttpServletResponse httpServletResponse,
                         AuthenticationException e) throws IOException, ServletException {
        assert e != null;

        if (e instanceof PortalErrorContainer) {
            /* System defined exceptions. */
            PortalError error = PortalErrorContainer.class.cast(e).getPortalError();

            if (e instanceof TokenContainer) {
                String token = TokenContainer.class.cast(e).getToken();
                commenceToken(token, error, httpServletResponse);
            } else {
                commence(error, httpServletResponse);
            }
        } else {
            /* Generic authentication exception thrown by spring-security. */
            commence(PortalError.REST_AUTHENTICATION_ERROR, httpServletResponse);
        }
    }
}
